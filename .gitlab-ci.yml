# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image:
  name: docker:latest

services:
  - docker:dind

before_script:
  - apk add curl

stages:          # List of stages for jobs, and their order of execution
  # - build
  - test

#build-job:
#  stage: build
#  script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker pull $CI_REGISTRY_IMAGE/app-php:latest || true
#    - docker compose -f compose.yaml -f compose.php.yaml build --pull
#    - docker tag app-php $CI_REGISTRY_IMAGE/app-php:latest
#    - docker push $CI_REGISTRY_IMAGE/app-php:latest

test-job:       # This job runs in the build stage, which runs first.
  stage: test
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/app-php:latest
#    - docker compose -f compose.yaml -f compose.php.yaml build --pull
    - docker compose -f compose.yaml -f compose.php.yaml up --wait --no-build
    - docker compose exec php php bin/console oro:install --env=test
    - curl -v -o /dev/null http://localhost
    - curl -vk -o /dev/null https://localhost
    - docker compose exec -T php bin/phpunit vendor/oro/commerce/src/Oro/Bundle/ProductBundle/Tests/Unit
